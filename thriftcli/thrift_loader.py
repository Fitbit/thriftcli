# Copyright Notice:
# Copyright 2017, Fitbit, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import importlib
import os
import shutil
import subprocess
import sys

import thrift
from .thrift_cli_error import ThriftCLIError
from .thrift_parser import ThriftParser


class ThriftLoader(object):
    """ Handles everything related to Thrift file parsing, generation and loading of Python packages  """

    def __init__(self, thrift_path, thrift_dir_paths):
        """ Eagerly loads the thrift files, generates the Python packages and loads them

        :param thrift_path: the path to the Thrift file defining the service being requested
        :type thrift_path: str
        :param thrift_dir_paths: a list of paths to directories containing Thrift file dependencies
        :type thrift_dir_paths: list
        """

        self._thrift_path = thrift_path
        self._thrift_dir_paths = set(thrift_dir_paths) if thrift_dir_paths is not None else set([])
        # Handle case where thrift file is in the current directory
        thrift_file_dir = os.path.dirname(thrift_path) or '.'
        self._thrift_dir_paths.add(thrift_file_dir)

        self._parser = ThriftParser(thrift_path, thrift_dir_paths)
        self._parse_result = self._parser.parse()
        self._generate_and_import_packages()

    def cleanup(self, remove_generated_src=False):
        if remove_generated_src:
            self._remove_dir('gen-py')

    @staticmethod
    def _remove_dir(path):
        """ Recursively removes a directory and ignores if it didn't exist.

        :param path: the directory to remove

        """
        try:
            shutil.rmtree(path)
        except OSError:
            pass

    def _generate_and_import_packages(self):
        """ Generates and imports the python modules defined by the thrift code.

        This method does the following:
        1. Runs a shell process to generate the python code from the Thrift file
        2. Adds the generated source to the python process' path
        3. Imports the generated source package into this python process

        """
        thrift_dir_options = ''.join([' -I %s' % thrift_dir_path for thrift_dir_path in self._thrift_dir_paths])
        command = 'thrift -r%s --gen py %s' % (thrift_dir_options, self._thrift_path)
        if subprocess.call(command, shell=True) != 0:
            raise ThriftCLIError('Thrift generation command failed: \'%s\'' % command)
        sys.path.append('gen-py')
        for basename, package in self.get_namespaces().items():
            self._import_package(basename, package)

    def get_service_reference(self, service_name):
        return '%s.%s' % (ThriftParser.get_package_name(self._thrift_path), service_name)

    def get_namespaces(self):
        return self._parse_result.namespaces

    def get_client_method(self, service_name, method_name):
        """ Returns the python method generated for the given endpoint.

        :param method_name: the name of the method to retrieve
        :returns: the python method that can be called to execute the Thrift RPC
        :rtype: method

        """
        client_constructor = getattr(sys.modules[self.get_service_reference(service_name)], "Client")
        client = client_constructor(self._protocol)
        try:
            method = getattr(client, method_name)
        except AttributeError:
            raise ThriftCLIError('\'%s\' service has no method \'%s\'' % (self._service_reference, method_name))
        return method

    @staticmethod
    def _import_package(basename, package_name):
        """ Imports a package generated by thrift code

        :param package_name: the name of the package to import, which must be located somewhere on sys.path

        """
        package = importlib.import_module(package_name)
        for module in package.__all__:
            sub_module_name = '.'.join([basename, module])
            sub_package_name = '.'.join([package_name, module])
            sub_package = importlib.import_module(sub_package_name)
            sys.modules[sub_module_name] = sub_package
